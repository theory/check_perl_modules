#!/usr/bin/perl -w

use strict;
use warnings;
use Getopt::Long;
our $VERSION = '0.20';

Getopt::Long::Configure (qw(bundling));

my %config = (
    cpan_outdated => 'cpan-outdated',
    verbose       => 0,
);
Getopt::Long::GetOptions(
    'cpan-outdated|c=s' => \$config{cpan_outdated},
    'verbose|v+'        => \$config{verbose},
    'help|H'            => \$config{help},
    'man|M'             => \$config{man},
    'version|V'         => \$config{version},
) or pod2usage();

# Handle documentation requests.
pod2usage(
    ( $config{man} ? ( '-sections' => '.+' ) : ()),
    '-exitval' => 0,
) if $config{help} or $config{man};

# Handle version request.
if ($config{version}) {
    require File::Basename;
    print File::Basename::basename($0), " $VERSION\n";
    exit;
}

my $exitval = 0;
print "Searching installed modules...\n" if $config{verbose} > 1;
my $fh = _pipe($config{cpan_outdated});
while (<$fh>) {
    unless ($exitval) {
        print "WARNING: One or more Perl modules are out of date\n";
        $exitval = 1;
    }
    print if $config{verbose};
}

print "OK: All Perl modules up-to-date\n" unless $exitval;

exit $exitval;

sub _pipe {
    # Safer version of backtick (see perlipc(1)).
    if ($^O eq 'MSWin32') {
        my $cmd = q{"}  . join(q{" "}, @_) . q{"|};
        open my $pipe, $cmd or die "Cannot fork: $!\n";
        return $pipe;
    }

    my $pid = open my $pipe, '-|';
    die "Cannot fork: $!\n" unless defined $pid;
    return $pipe if $pid;

    # Child process. Execute the commands.
    exec @_ or die "Cannot exec $_[0]: $!\n";
    # Not reached.
}

sub pod2usage {
    require Pod::Usage;
    Pod::Usage::pod2usage(
        '-verbose'  => 99,
        '-sections' => '(?i:(Usage|Options))',
        '-exitval'  => 1,
        '-input'    => __FILE__,
        @_
    );
}

=head1 Name

check_perl_modules - Nagios plugin verifying that the latest versions of all Perl modules are installed

=head1 Usage

  check_perl_modules --verbose

=head1 Description

This program emits a Nagios-compliant warning (and the accompanying exit code)
if any installed Perl modules are not the latest version (as reported by L<cpan-outdated>.

=head1 Options

  -c  --cpan-outdated  Path to cpan-outdated.
  -v, --verbose        Incremental verbose mode.
  -H, --help           Print a usage statement and exit.
  -M, --man            Print the complete documentation and exit.
  -V, --version        Print the version number and exit.

=head1 Options Details

=over

=item C<-c>

=item C<--cpan-outdated>

  check_perl_modules --cpan-oudated /opt/bin/cpan-outdated
  check_perl_modules -c ~/bin/my-cpan-outdated

The path to the C<L<cpan-oudated>> script. Set to C<cpan-outdated> by default,
which should work fine if the script is in the path.

=item C<-v>

=item C<--verbose>

  check_perl_modules --verbose
  check_perl_modules -vv

Output status messages as the program runs. If specified, each out-of-date
distribution will be listed.

=item C<-H>

=item C<--help>

  check_perl_modules --help
  check_perl_modules -H

Outputs a brief description of the options supported by C<check_perl_modules>
and exits.

=item C<-M>

=item C<--man>

  check_perl_modules --man
  check_perl_modules -M

Outputs this documentation and exits.

=item C<-V>

=item C<--version>

  check_perl_modules --version
  check_perl_modules -V

Outputs the program name and version and exits.

=back

=head1 Author

David E. Wheeler <david.wheeler@pgexperts.com>

=head1 Copyright and License

Copyright (c) 2011 David E. Wheeler. Some Rights Reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut
